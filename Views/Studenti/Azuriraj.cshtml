@using Paup_2023.Models
@model Student
@{
    ViewBag.Title = "Ažuriranje: " + Model.Ime + " " + Model.Prezime;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Ažuriranje podataka o studentu</h2>
<h3>@Model.Ime @Model.Prezime </h3>

@using (Html.BeginForm())
{
    @*
    Html.AntiForgeryToken() - mehanizam koji nas štiti od cross site request
    forgery napada (poziva HTTP POST metodu izvan naše aplikacije)
    *@
    @Html.ValidationSummary(true, "Ispravite podatke!");
    @Html.AntiForgeryToken()
<table>
    <tr>
        @*
            Html.LabelFor ispisuje labelu za određeni atribut, ako
            je definirana [Display(Name = "")] anotacija nad atributom u modelu
            tada ispisuje to a ako nema onda ispisuje naziv samog atributa
        *@
        <td>@Html.LabelFor(model => model.Id)</td>
        <td>
            @*HTML helper za tekstualno polje za određeni atribut modela *@
            @Html.TextBoxFor(model => model.Id, new { disabled = true })
        </td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.Ime)</td>
        <td>
            @Html.TextBoxFor(model => model.Ime)
            @Html.ValidationMessageFor(model => model.Ime)
        </td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.Prezime)</td>
        <td>
            @Html.TextBoxFor(model => model.Prezime)
            @Html.ValidationMessageFor(model => model.Prezime)
        </td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.Spol)</td>
        <td>
            @*HTML halper za radio button za određeni atribut modela,
                prvi argument je atribut modela (model => model.Spol)
                dok je drugi vrijednos 'M', nakon helpera je vrijednost
                koja se prikazuje korisniku*@
            @Html.RadioButtonFor(model => model.Spol, "M") Muški
            @Html.RadioButtonFor(model => model.Spol, "Z") Ženski
            @Html.ValidationMessageFor(model => model.Spol)
        </td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.DatumRodjenja)</td>
        <td>
            @Html.TextBoxFor(model => model.DatumRodjenja)
            @Html.ValidationMessageFor(model => model.DatumRodjenja)
        </td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.Oib)</td>
        <td>
            @Html.TextBoxFor(model => model.Oib)
            @Html.ValidationMessageFor(model => model.Oib)
        </td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.GodinaStudija)</td>
        <td>
            @* HTML helper za padajuću listu koja se generira na
        temelju mogućih vrijednosti enum polja*@
            @Html.EnumDropDownListFor(model => model.GodinaStudija)
            @Html.ValidationMessageFor(model => model.GodinaStudija)

            @*
                @Html.DropDownListFor(model => model.GodinaStudija)
        Drugi način je preko DropDownListFor:
            new SelectList(new List<object>
        {
            new { value = 1, text = "Prva"},
            new { value = 2, text = "Druga"},
            new { value = 3, text = "Treca"},
            new { value = 4, text = "Cetvrta"},
            new { value = 5, text = "Peta"},
        }, "value", "text"))
            *@
        </td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.RedovanStudent)</td>
        <td>
            @Html.CheckBoxFor(model => model.RedovanStudent)
            @Html.ValidationMessageFor(model => model.RedovanStudent)
        </td>
    </tr>
</table>
@Html.ValidationSummary(false, "Spremanje nije uspjelo!");
<p>
    <input type="submit" value="Spremi" />
</p>
@Html.ActionLink("Povratak bez spremanja", "Popis", "Studenti")
}